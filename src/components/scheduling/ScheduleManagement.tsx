import React, { useEffect, useState, useMemo } from "react";
import { useNavigate } from "react-router-dom";
import { apiService } from "@/services/apiService";
import { useSystemSettings } from "@/contexts/SystemSettingsContext";
import AutoGenerateDialog from "./AutoGenerateDialog";
import {
  Calendar as CalendarIcon,
  Clock,
  Users,
  MapPin,
  BookOpen,
  Plus,
  Search,
  RefreshCw,
  Trash2,
  Grid3X3,
  List,
  X,
  Smartphone,
  Pencil,
  Wand2,
  ClipboardCheck,
  MoreVertical,
  CalendarDays,
} from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { toast } from "@/components/ui/use-toast";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { WeekCalendar, WeekCalEvent } from "@/components/scheduling/WeekCalendar";
import { ScheduleTable } from "@/components/scheduling/ScheduleTable";
import { ScheduleCards } from "@/components/scheduling/ScheduleCards";

type Origin = "auto" | "manual";

interface Schedule {
  schedule_id: string;
  school_year: string;
  semester: string;
  subj_code: string;
  subj_name: string;
  professor_name: string;
  section_name: string;
  schedule_type: string; // "Onsite", "Homeroom", "Recess", etc.
  start_time: string; // "HH:MM"
  end_time: string;   // "HH:MM"
  days: string[];
  room_number: string | null;
  room_type: string | null;
  level: string;
  strand: string;
  origin: Origin;
  status?: string;
}

interface Professor {
  id: string;
  name: string;
}

interface SimpleFilters {
  search: string;
  professor: string;
  level: string;
  strand: string;
}

type ViewMode = "calendar" | "cards" | "table";
type TabFilter = "all" | "auto" | "manual";

/* ----------------- Utils ----------------- */
const deriveOrigin = (raw: any): Origin => {
  const o = (raw?.origin || "").toString().toLowerCase();

  // Treat any "auto*" origin (e.g., "auto-default") as auto
  if (o.startsWith("auto")) return "auto";

  if (
    raw?.is_auto_generated === true ||
    raw?.auto_generated === true ||
    raw?.generated_by === "auto" ||
    raw?.created_by === "system"
  ) {
    return "auto";
  }
  return "manual";
};

const DAY_ORDER = ["monday","tuesday","wednesday","thursday","friday","saturday","sunday"];
const DAY_LABEL: Record<string,string> = {
  monday:"Mon", tuesday:"Tue", wednesday:"Wed", thursday:"Thu", friday:"Fri", saturday:"Sat", sunday:"Sun"
};
const toMinutes = (hhmm: string) => {
  const [h, m] = hhmm.split(":").map(Number);
  return h*60 + m;
};
const formatTimeAMPM = (time: string) => {
  if (!time) return "";
  const [hours, minutes] = time.split(":");
  const hour = parseInt(hours, 10);
  return `${hour % 12 || 12}:${minutes} ${hour >= 12 ? "PM" : "AM"}`;
};

const normalizeStaticSlot = <T extends { start_time: string; end_time: string; subj_code?: string; subj_name?: string; professor_name?: string; schedule_type?: string }>(s: T): T => {
  const start = (s.start_time || "").trim();
  const end   = (s.end_time || "").trim();

  if (start === "07:30" && end === "08:00") {
    return {
      ...s,
      subj_code: "HOMEROOM",
      subj_name: "Homeroom",
      schedule_type: "Homeroom",
      professor_name: "ADVISER",
    };
  }

  if (start === "08:00" && end === "08:30") {
    return {
      ...s,
      subj_code: "RECESS",
      subj_name: "Recess",
      schedule_type: "Recess",
      professor_name: "",
    };
  }

  return s;
};

const ScheduleManagement: React.FC = () => {
  const { settings } = useSystemSettings();
  const navigate = useNavigate();

  const [schedules, setSchedules] = useState<Schedule[]>([]);
  const [professors, setProfessors] = useState<Professor[]>([]);
  const [loading, setLoading] = useState(true);

  // Default to CALENDAR view
  const [viewMode, setViewMode] = useState<ViewMode>("calendar");

  const [selectedSchedule, setSelectedSchedule] = useState<Schedule | null>(null);
  const [isDetailsOpen, setIsDetailsOpen] = useState(false);
  const [isDeleteOpen, setIsDeleteOpen] = useState(false);
  const [scheduleToDelete, setScheduleToDelete] = useState<string | null>(null);
  const [isSyncing, setIsSyncing] = useState(false);

  const [isAutoDialogOpen, setIsAutoDialogOpen] = useState(false);
  const [isChecking, setIsChecking] = useState(false);

  const [filters, setFilters] = useState<SimpleFilters>({
    search: "",
    professor: "all",
    level: "all",
    strand: "all",
  });

  const [tab, setTab] = useState<TabFilter>("all");

  const [isEditProfOpen, setIsEditProfOpen] = useState(false);
  const [scheduleToEdit, setScheduleToEdit] = useState<Schedule | null>(null);
  const [selectedProfessorId, setSelectedProfessorId] = useState<string>("");

  // Version to force-remount calendar after data refresh
  const [dataVersion, setDataVersion] = useState(0);

  /* ----- Stats ----- */
  const stats = useMemo(() => {
    const total = schedules.length;
    const dayNames = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"];
    const todayName = dayNames[new Date().getDay()];
    const todaySchedules = schedules.filter((s) => s.days.some((d) => d.toLowerCase() === todayName)).length;
    const autoCount = schedules.filter((s) => s.origin === "auto").length;
    const manualCount = schedules.filter((s) => s.origin === "manual").length;
    return { total, today: todaySchedules, auto: autoCount, manual: manualCount };
  }, [schedules]);

  /* ----- Data Fetch ----- */
  const fetchSchedules = async (): Promise<number> => {
    setLoading(true);
    try {
      // send a cache buster to avoid 304/proxy/browser caches
      const response = await apiService.getSchedules({
        school_year: settings.schoolYear,
        semester: settings.semester,
        _t: Date.now(), // cache-bust query param
      });

      if (response.success && Array.isArray(response.data)) {
        const mapped = response.data.map((schedule: any) => ({
          schedule_id: schedule.schedule_id?.toString?.() ?? String(schedule.schedule_id),
          school_year: schedule.school_year,
          semester: schedule.semester,
          subj_code: schedule.subj_code || "",
          subj_name: schedule.subj_name || (schedule.schedule_type ?? ""),
          professor_name:
            schedule.professor_name ||
            (["Homeroom", "Recess"].includes(schedule.schedule_type) ? "â€”" : ""),
          section_name: schedule.section_name,
          schedule_type: schedule.schedule_type,
          start_time: schedule.start_time,
          end_time: schedule.end_time,
          days: Array.isArray(schedule.days)
            ? schedule.days
            : typeof schedule.days === "string"
            ? (() => {
                try {
                  return JSON.parse(schedule.days);
                } catch {
                  return [];
                }
              })()
            : [],
          room_number: schedule.room_number,
          room_type: schedule.room_type,
          level: schedule.level || "",
          strand: schedule.strand || "",
          origin: deriveOrigin(schedule),
          status: (schedule.status || schedule.review_status || "")
            .toString()
            .toLowerCase(),
        })) as Schedule[];

        const normalized = mapped.map(normalizeStaticSlot);
        setSchedules(normalized);

        // Force WeekCalendar to remount (avoid stale memoized layout)
        setDataVersion((v) => v + 1);

        return normalized.length;
      }
      return 0;
    } catch {
      toast({ title: "Error", description: "Failed to load schedules", variant: "destructive" });
      return 0;
    } finally {
      setLoading(false);
    }
  };

  const fetchProfessors = async () => {
    try {
      const response = await apiService.getProfessors();
      if (response.success && Array.isArray(response.data)) {
        const mapped = response.data
          .filter((p: any) => p && (p.prof_id || p.id))
          .map((p: any) => ({
            id: (p.prof_id || p.id).toString(),
            name: p.prof_name || p.name || "Unknown Professor",
          }));
        setProfessors(mapped);
      }
    } catch {}
  };

  useEffect(() => {
    fetchSchedules();
    fetchProfessors();
  }, [settings.schoolYear, settings.semester]);

  /* ----- Sync & Actions ----- */
  const syncToMobile = async () => {
    setIsSyncing(true);
    try {
      const response = await apiService.syncToFirebase();
      if (response.success) {
        toast({ title: "Sync Successful", description: "Schedules have been synced to mobile app" });
      } else {
        toast({
          title: "Sync Failed",
          description: response.message || "Failed to sync to mobile app",
          variant: "destructive",
        });
      }
    } catch {
      toast({
        title: "Sync Error",
        description: "An error occurred while syncing to mobile app",
        variant: "destructive",
      });
    } finally {
      setIsSyncing(false);
    }
  };

  const runAutomation = async (payload: any) => {
    setIsChecking(true);
    try {
      const beforeCount = schedules.length;

      const res = await apiService.autoGenerate({
        ...payload,
        school_year: settings.schoolYear,
        semester: settings.semester,
      });

      if (res.success) {
        let afterCount = await fetchSchedules();

        // If the count didn't change yet, retry a few short times to dodge write-lag
        if (afterCount === beforeCount) {
          const waits = [150, 300, 500]; // ms
          for (const w of waits) {
            await new Promise((r) => setTimeout(r, w));
            afterCount = await fetchSchedules();
            if (afterCount !== beforeCount) break;
          }
        }

        setIsAutoDialogOpen(false);
        setTab("auto");
        toast({
          title: "Automation complete",
          description: res.message || "Generated schedules successfully.",
        });
      } else {
        toast({
          title: "Automation failed",
          description: res.message || "See server logs.",
          variant: "destructive",
        });
      }
    } catch (e: any) {
      toast({ title: "Error", description: e?.message || "Automation error.", variant: "destructive" });
    } finally {
      setIsChecking(false);
    }
  };

  const deleteSchedule = async () => {
    if (!scheduleToDelete) return;
    try {
      const response = await apiService.deleteSchedule(parseInt(scheduleToDelete));
      if (response.success) {
        setSchedules((prev) => prev.filter((s) => s.schedule_id !== scheduleToDelete));
        toast({ title: "Success", description: "Schedule deleted successfully" });
      } else {
        toast({ title: "Error", description: "Failed to delete schedule", variant: "destructive" });
      }
    } catch {
      toast({ title: "Error", description: "Failed to delete schedule", variant: "destructive" });
    } finally {
      setIsDeleteOpen(false);
      setScheduleToDelete(null);
    }
  };

  const clearFilters = () => {
    setFilters({ search: "", professor: "all", level: "all", strand: "all" });
  };

  const openEditProfessor = (schedule: Schedule) => {
    setScheduleToEdit(schedule);
    const currentProf = professors.find((p) => p.name === schedule.professor_name);
    setSelectedProfessorId(currentProf ? currentProf.id : "");
    setIsEditProfOpen(true);
  };

  const applyProfessorChange = async () => {
    if (!scheduleToEdit || !selectedProfessorId) {
      toast({ title: "Missing selection", description: "Please choose a professor.", variant: "destructive" });
      return;
    }
    const newProf = professors.find((p) => p.id === selectedProfessorId);
    if (!newProf) {
      toast({ title: "Invalid professor", description: "Please choose a valid professor.", variant: "destructive" });
      return;
    }
    try {
      const sid = parseInt(scheduleToEdit.schedule_id);
      const pid = parseInt(selectedProfessorId);
      const res = await apiService.updateScheduleProfessor(sid, pid);
      if (res?.success) {
        setSchedules((prev) =>
          prev.map((s) =>
            s.schedule_id === scheduleToEdit.schedule_id ? { ...s, professor_name: newProf.name } : s
          )
        );
        if (selectedSchedule && selectedSchedule.schedule_id === scheduleToEdit.schedule_id) {
          setSelectedSchedule({ ...selectedSchedule, professor_name: newProf.name });
        }
        toast({ title: "Updated", description: "Professor updated for this schedule." });
        setIsEditProfOpen(false);
      } else {
        toast({ title: "Update failed", description: res?.message || "Server did not accept the change.", variant: "destructive" });
      }
    } catch (e: any) {
      toast({ title: "Error", description: e?.message || "Could not update professor.", variant: "destructive" });
    }
  };

  /* ----- Filtering ----- */
  const filteredSchedules = useMemo(() => {
    return schedules.filter((schedule) => {
      if (tab !== "all" && schedule.origin !== tab) return false;
      if (filters.search) {
        const s = filters.search.toLowerCase();
        const ok =
          schedule.section_name.toLowerCase().includes(s) ||
          (schedule.subj_code || "").toLowerCase().includes(s) ||
          (schedule.subj_name || "").toLowerCase().includes(s) ||
          (schedule.professor_name || "").toLowerCase().includes(s);
        if (!ok) return false;
      }
      if (filters.professor !== "all") {
        if (!(schedule.professor_name || "").toLowerCase().includes(filters.professor.toLowerCase())) return false;
      }
      if (filters.level !== "all" && schedule.level !== filters.level) return false;
      if (filters.strand !== "all" && schedule.strand !== filters.strand) return false;
      return true;
    });
  }, [schedules, filters, tab]);

  /* ----------------- Calendar View ----------------- */
  // Calendar window
  const CAL_START = "07:30";
  const CAL_END   = "16:30";
  const startMin = toMinutes(CAL_START);
  const endMin   = toMinutes(CAL_END);

  // Pixels per minute (affects overall calendar height)
  const PX_PER_MIN = 1.2; // 540min * 1.2 = 648px tall grid

  // Build time ticks for the ruler (every 30 minutes)
  const timeTicks = useMemo(() => {
    const ticks: { label: string; minutes: number }[] = [];
    for (let m = startMin; m <= endMin; m += 30) {
      const hh = Math.floor(m / 60).toString().padStart(2, "0");
      const mm = (m % 60).toString().padStart(2, "0");
      ticks.push({ label: formatTimeAMPM(`${hh}:${mm}`), minutes: m });
    }
    return ticks;
  }, [startMin, endMin]);

  // Events for WeekCalendar
  const calendarEvents: WeekCalEvent[] = useMemo(() => {
    const toDay = (d: string) => d.toLowerCase() as WeekCalEvent["day"];
    const list: WeekCalEvent[] = [];
    filteredSchedules.map(normalizeStaticSlot).forEach((s) => {
      (s.days || []).forEach((d) => {
        list.push({
          id: `${s.schedule_id}-${d}`,
          day: toDay(d),
          start: s.start_time,
          end: s.end_time,
          title: (s.subj_code || s.schedule_type || "").toString(),   // shows HOMEROOM / RECESS too
          subtitle: s.section_name,
          meta: `${s.professor_name || "â€”"}${s.room_number ? ` â€¢ ${s.room_number}` : ""}`,
          schedule_type: s.schedule_type,
          origin: s.origin,
          raw: s,
        });
      });
    });
    return list;
  }, [filteredSchedules]);

  const getOriginBadge = (origin: Origin) => {
    return origin === "auto" ? (
      <Badge className="bg-indigo-100 text-indigo-800 border-indigo-200">Auto</Badge>
    ) : (
      <Badge className="bg-amber-100 text-amber-800 border-amber-200">Manual</Badge>
    );
  };

  const isReviewable = (s: Schedule) => s.origin === "auto" && s.status?.toLowerCase?.() === "pending";
  const goToReview = (id: string) => navigate(`/scheduling/review/${id}`);

  const CardActionsMenu: React.FC<{ s: Schedule }> = ({ s }) => (
    <DropdownMenu>
      <DropdownMenuTrigger
        asChild
        onClick={(e) => e.stopPropagation()}
        onPointerDown={(e) => e.stopPropagation()}
      >
        <Button size="icon" variant="ghost" className="h-8 w-8">
          <MoreVertical className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent
        align="end"
        onClick={(e) => e.stopPropagation()}
        onPointerDown={(e) => e.stopPropagation()}
      >
        <DropdownMenuLabel>Actions</DropdownMenuLabel>
        <DropdownMenuSeparator />
        <DropdownMenuItem
          onClick={(e) => {
            e.stopPropagation();
            openEditProfessor(s);
          }}
        >
          <Pencil className="mr-2 h-4 w-4" />
          Change Professor
        </DropdownMenuItem>
        {isReviewable(s) && (
          <DropdownMenuItem
            onClick={(e) => {
              e.stopPropagation();
              goToReview(s.schedule_id);
            }}
          >
            <ClipboardCheck className="mr-2 h-4 w-4" />
            Review
          </DropdownMenuItem>
        )}
        <DropdownMenuSeparator />
        <DropdownMenuItem
          className="text-red-600 focus:text-red-600"
          onClick={(e) => {
            e.stopPropagation();
            setScheduleToDelete(s.schedule_id);
            setIsDeleteOpen(true);
          }}
        >
          <Trash2 className="mr-2 h-4 w-4" />
          Delete
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );

  /* ----- Existing Cards/Table (kept) ----- */
  const renderScheduleCard = (schedule: Schedule) => (
    <Card
      key={schedule.schedule_id}
      className="hover:shadow-md transition-shadow relative cursor-pointer"
      onClick={() => {
        setSelectedSchedule(schedule);
        setIsDetailsOpen(true);
      }}
      role="button"
    >
      <div className="absolute top-2 right-2">
        <CardActionsMenu s={schedule} />
      </div>

      <CardHeader className="pb-3 pr-12">
        <div className="flex items-start justify-between">
          <div>
            <CardTitle className="text-lg">{schedule.section_name}</CardTitle>
            <p className="text-sm text-muted-foreground">
              {schedule.level} - {schedule.strand}
            </p>
          </div>
          <div className="flex items-center gap-2">{getOriginBadge(schedule.origin)}</div>
        </div>
      </CardHeader>

      <CardContent className="space-y-3 pr-12">
        <div className="flex items-center gap-2">
          <BookOpen className="h-4 w-4 text-muted-foreground" />
          <div>
            <p className="font-medium text-sm">{schedule.subj_code || schedule.schedule_type}</p>
            <p className="text-xs text-muted-foreground">{schedule.subj_name}</p>
          </div>
        </div>

        <div className="flex items-center gap-2">
          <Users className="h-4 w-4 text-muted-foreground" />
          <p className="text-sm">{schedule.professor_name || "â€”"}</p>
        </div>

        <div className="flex items-center gap-2">
          <Clock className="h-4 w-4 text-muted-foreground" />
          <p className="text-sm">
            {formatTimeAMPM(schedule.start_time)} - {formatTimeAMPM(schedule.end_time)}
          </p>
        </div>

        <div className="flex items-center gap-2">
          <CalendarIcon className="h-4 w-4 text-muted-foreground" />
          <div className="flex flex-wrap gap-1">
            {schedule.days.map((day) => (
              <Badge key={day} variant="outline" className="text-xs">
                {day.slice(0, 3)}
              </Badge>
            ))}
          </div>
        </div>

        {schedule.room_number && (
          <div className="flex items-center gap-2">
            <MapPin className="h-4 w-4 text-muted-foreground" />
            <p className="text-sm">{schedule.room_number}</p>
          </div>
        )}
      </CardContent>
    </Card>
  );

  /* ----------------- Render ----------------- */
  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto py-6 px-4 space-y-6">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
          <div>
            <h1 className="text-2xl font-bold">Class Schedules</h1>
            <p className="text-muted-foreground">
              {settings.schoolYear} - {settings.semester}
            </p>
          </div>
          <div className="flex gap-2">
            <Button variant="outline" onClick={fetchSchedules} disabled={loading}>
              <RefreshCw className={`mr-2 h-4 w-4 ${loading ? "animate-spin" : ""}`} />
              Refresh
            </Button>
            <Button
              variant="outline"
              onClick={syncToMobile}
              disabled={isSyncing}
              className="bg-blue-50 border-blue-200 text-blue-700 hover:bg-blue-100"
            >
              <Smartphone className={`mr-2 h-4 w-4 ${isSyncing ? "animate-pulse" : ""}`} />
              {isSyncing ? "Syncing..." : "Sync to Mobile"}
            </Button>
            <Button onClick={() => navigate("/scheduling/new")}>
              <Plus className="mr-2 h-4 w-4" />
              Add Schedule
            </Button>
            <Button variant="outline" onClick={() => setIsAutoDialogOpen(true)}>
              <Wand2 className="mr-2 h-4 w-4" />
              Auto-Generate
            </Button>
          </div>
        </div>

        {/* KPI Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-muted-foreground">Total Schedules</p>
                  <p className="text-2xl font-bold">{stats.total}</p>
                </div>
                <CalendarDays className="h-8 w-8 text-blue-500" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-muted-foreground">Today's Classes</p>
                  <p className="text-2xl font-bold">{stats.today}</p>
                </div>
                <Clock className="h-8 w-8 text-green-500" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-muted-foreground">Auto / Manual</p>
                  <p className="text-2xl font-bold">
                    {stats.auto} / {stats.manual}
                  </p>
                </div>
                <Wand2 className="h-8 w-8 text-indigo-500" />
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Filters */}
        <Card>
          <CardContent className="p-4">
            <div className="flex flex-col md:flex-row gap-4">
              <div className="flex-1">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                  <Input
                    placeholder="Search schedules..."
                    value={filters.search}
                    onChange={(e) => setFilters((prev) => ({ ...prev, search: e.target.value }))}
                    className="pl-10"
                  />
                </div>
              </div>

              <div className="flex gap-2">
                <Select
                  value={filters.professor}
                  onValueChange={(value) => setFilters((prev) => ({ ...prev, professor: value }))}
                >
                  <SelectTrigger className="w-[160px]">
                    <SelectValue placeholder="Professors" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Professors</SelectItem>
                    {professors.map((prof) => (
                      <SelectItem key={prof.id} value={prof.name}>
                        {prof.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>

                <Select
                  value={filters.level}
                  onValueChange={(value) => setFilters((prev) => ({ ...prev, level: value }))}
                >
                  <SelectTrigger className="w-[120px]">
                    <SelectValue placeholder="Level" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Levels</SelectItem>
                    <SelectItem value="11">Grade 11</SelectItem>
                    <SelectItem value="12">Grade 12</SelectItem>
                  </SelectContent>
                </Select>

                <Select
                  value={filters.strand}
                  onValueChange={(value) => setFilters((prev) => ({ ...prev, strand: value }))}
                >
                  <SelectTrigger className="w-[120px]">
                    <SelectValue placeholder="Strand" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Strands</SelectItem>
                    <SelectItem value="STEM">STEM</SelectItem>
                    <SelectItem value="HUMSS">HUMSS</SelectItem>
                    <SelectItem value="GAS">GAS</SelectItem>
                    <SelectItem value="ABM">ABM</SelectItem>
                  </SelectContent>
                </Select>

                {(filters.search ||
                  filters.professor !== "all" ||
                  filters.level !== "all" ||
                  filters.strand !== "all") && (
                  <Button variant="outline" onClick={clearFilters}>
                    <X className="h-4 w-4" />
                  </Button>
                )}
              </div>
            </div>

            <div className="mt-4">
              <Tabs value={tab} onValueChange={(v) => setTab(v as TabFilter)}>
                <TabsList>
                  <TabsTrigger value="all">All</TabsTrigger>
                  <TabsTrigger value="auto">Auto-generated</TabsTrigger>
                  <TabsTrigger value="manual">Manual</TabsTrigger>
                </TabsList>
              </Tabs>
            </div>

            <div className="flex items-center justify-between mt-4">
              <p className="text-sm text-muted-foreground">
                Showing {filteredSchedules.length} of {schedules.length} schedules
              </p>
              <div className="flex gap-2">
                <Button
                  size="sm"
                  variant={viewMode === "calendar" ? "default" : "outline"}
                  onClick={() => setViewMode("calendar")}
                >
                  <CalendarIcon className="h-4 w-4" />
                </Button>
                <Button
                  size="sm"
                  variant={viewMode === "cards" ? "default" : "outline"}
                  onClick={() => setViewMode("cards")}
                >
                  <Grid3X3 className="h-4 w-4" />
                </Button>
                <Button
                  size="sm"
                  variant={viewMode === "table" ? "default" : "outline"}
                  onClick={() => setViewMode("table")}
                >
                  <List className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Main body */}
        {loading ? (
          <div className="flex items-center justify-center h-64">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
          </div>
        ) : filteredSchedules.length === 0 ? (
          <Card>
            <CardContent className="p-12 text-center">
              <CalendarIcon className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
              <h3 className="text-lg font-semibold mb-2">No schedules found</h3>
              <p className="text-muted-foreground mb-4">
                {schedules.length === 0
                  ? "Create your first schedule to get started."
                  : "Try adjusting your filters or switch tabs."}
              </p>
              <div className="flex justify-center gap-2">
                <Button onClick={() => navigate("/scheduling/new")}>
                  <Plus className="mr-2 h-4 w-4" />
                  Add Schedule
                </Button>
                <Button variant="outline" onClick={() => setIsAutoDialogOpen(true)}>
                  <Wand2 className="mr-2 h-4 w-4" />
                  Auto-Generate
                </Button>
              </div>
            </CardContent>
          </Card>
        ) : viewMode === "calendar" ? (
          <WeekCalendar
            key={`${dataVersion}-${tab}`}   // force-remount when fresh data or tab changes
            events={calendarEvents}
            startTime="07:30"
            endTime="16:30"
            defaultPxPerMin={1.2}
            onEventClick={(ev) => {
              setSelectedSchedule(ev.raw);
              setIsDetailsOpen(true);
            }}
          />
        ) : viewMode === "cards" ? (
          <ScheduleCards
            schedules={filteredSchedules}
            onCardClick={(s) => {
              setSelectedSchedule(s);
              setIsDetailsOpen(true);
            }}
            onEditProfessor={(s) => openEditProfessor(s)}
            onReview={(s) => goToReview(s.schedule_id)}
            onDelete={(s) => {
              setScheduleToDelete(s.schedule_id);
              setIsDeleteOpen(true);
            }}
            cols={3}
          />
        ) : (
          <ScheduleTable
            schedules={filteredSchedules}
            onRowClick={(s) => {
              setSelectedSchedule(s);
              setIsDetailsOpen(true);
            }}
            onEditProfessor={(s) => openEditProfessor(s)}
            onReview={(s) => goToReview(s.schedule_id)}
            onDelete={(s) => {
              setScheduleToDelete(s.schedule_id);
              setIsDeleteOpen(true);
            }}
          />
        )}

        {/* Details dialog */}
        <Dialog open={isDetailsOpen} onOpenChange={setIsDetailsOpen}>
          <DialogContent className="max-w-md">
            <DialogHeader>
              <DialogTitle>Schedule Details</DialogTitle>
            </DialogHeader>

            {selectedSchedule && (
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="font-semibold text-lg">{selectedSchedule.section_name}</h3>
                    <p className="text-muted-foreground">
                      {selectedSchedule.level} - {selectedSchedule.strand}
                    </p>
                  </div>
                  {getOriginBadge(selectedSchedule.origin)}
                </div>

                <div className="space-y-3">
                  <div className="flex items-center gap-2">
                    <BookOpen className="h-4 w-4 text-muted-foreground" />
                    <div>
                      <p className="font-medium">{selectedSchedule.subj_code || selectedSchedule.schedule_type}</p>
                      <p className="text-sm text-muted-foreground">{selectedSchedule.subj_name}</p>
                    </div>
                  </div>

                  <div className="flex items-center gap-2">
                    <Users className="h-4 w-4 text-muted-foreground" />
                    <p>{selectedSchedule.professor_name || "â€”"}</p>
                  </div>

                  <div className="flex items-center gap-2">
                    <Clock className="h-4 w-4 text-muted-foreground" />
                    <p>
                      {formatTimeAMPM(selectedSchedule.start_time)} - {formatTimeAMPM(selectedSchedule.end_time)}
                    </p>
                  </div>

                  <div className="flex items-center gap-2">
                    <CalendarIcon className="h-4 w-4 text-muted-foreground" />
                    <div className="flex gap-1">
                      {selectedSchedule.days.map((day) => (
                        <Badge key={day} variant="outline">
                          {day}
                        </Badge>
                      ))}
                    </div>
                  </div>

                  {selectedSchedule.room_number && (
                    <div className="flex items-center gap-2">
                      <MapPin className="h-4 w-4 text-muted-foreground" />
                      <p>{selectedSchedule.room_number}</p>
                    </div>
                  )}
                </div>
              </div>
            )}

            <DialogFooter className="gap-2">
              {selectedSchedule && isReviewable(selectedSchedule) && (
                <Button onClick={() => goToReview(selectedSchedule.schedule_id)}>
                  <ClipboardCheck className="h-4 w-4 mr-2" />
                  Review
                </Button>
              )}
              {selectedSchedule && (
                <Button variant="outline" onClick={() => openEditProfessor(selectedSchedule)}>
                  <Pencil className="h-4 w-4 mr-2" />
                  Change Professor
                </Button>
              )}
              <Button variant="outline" onClick={() => setIsDetailsOpen(false)}>
                Close
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* Delete dialog */}
        <AlertDialog open={isDeleteOpen} onOpenChange={setIsDeleteOpen}>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>Delete Schedule</AlertDialogTitle>
              <AlertDialogDescription>
                Are you sure you want to delete this schedule? This action cannot be undone.
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel>Cancel</AlertDialogCancel>
              <AlertDialogAction onClick={deleteSchedule} className="bg-red-600 hover:bg-red-700">
                Delete
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>

        {/* Auto-generate */}
        <AutoGenerateDialog
          open={isAutoDialogOpen}
          onOpenChange={setIsAutoDialogOpen}
          onRun={runAutomation}
          defaults={{ school_year: settings.schoolYear, semester: settings.semester }}
          loading={isChecking}
        />

        {/* Edit professor */}
        <Dialog open={isEditProfOpen} onOpenChange={setIsEditProfOpen}>
          <DialogContent className="max-w-sm">
            <DialogHeader>
              <DialogTitle>Change Professor</DialogTitle>
            </DialogHeader>
            <div className="space-y-3">
              <div className="text-sm">
                {scheduleToEdit ? (
                  <>
                    <div className="mb-1 font-medium">{scheduleToEdit.section_name}</div>
                    <div className="text-muted-foreground">
                      {(scheduleToEdit.subj_code || scheduleToEdit.schedule_type) + " â€” " + (scheduleToEdit.subj_name || "")}
                    </div>
                  </>
                ) : null}
              </div>

              <Select value={selectedProfessorId} onValueChange={(v) => setSelectedProfessorId(v)}>
                <SelectTrigger>
                  <SelectValue placeholder="Select professor" />
                </SelectTrigger>
                <SelectContent>
                  {professors.map((p) => (
                    <SelectItem key={p.id} value={p.id}>
                      {p.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsEditProfOpen(false)}>
                Cancel
              </Button>
              <Button onClick={applyProfessorChange}>Save</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>
    </div>
  );
};

export default ScheduleManagement;
