import React, { useMemo, useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Checkbox } from "@/components/ui/checkbox";
import { useToast } from "@/components/ui/use-toast";
import apiService, { AutoGenPayload } from "@/services/apiService";
import { Loader2 } from "lucide-react";

type Props = {
  open: boolean;
  onOpenChange: (v: boolean) => void;
  onRun?: (payload: AutoGenPayload) => Promise<void> | void;
  defaults: { school_year: string; semester: string };
  /** NEW: allow parent to indicate busy state */
  loading?: boolean;
};

const dayOpts = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

const AutoGenerateDialog: React.FC<Props> = ({ open, onOpenChange, onRun, defaults, loading }) => {
  const { toast } = useToast();
  const [days, setDays] = useState<string[]>(["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]);
  const [slotMinutes, setSlotMinutes] = useState(60);
  const [maxDailyLoad, setMaxDailyLoad] = useState<number | undefined>(6);
  const [onlyWithRooms, setOnlyWithRooms] = useState(true);
  const [submitting, setSubmitting] = useState(false);

  // treat either internal submit in-flight or parent-provided loading as busy
  const busy = submitting || !!loading;

  const startTime = "07:30";
  const endTime = "16:30";

  const toggleDay = (d: string) => {
    setDays((prev) => (prev.includes(d) ? prev.filter((x) => x !== d) : [...prev, d]));
  };

  const payload: AutoGenPayload = useMemo(
    () => ({
      school_year: defaults.school_year,
      semester: defaults.semester,
      days,
      startTime,
      endTime,
      slotMinutes,
      maxDailyLoad,
      onlySectionsWithAssignedRooms: onlyWithRooms,
      preventSameTimeSameSection: true,
      preventProfDoubleBooking: true,
      preventDuplicateSubjectPerSection: true,
      subjectWeeklyHourCap: 4,
    }),
    [defaults.school_year, defaults.semester, days, slotMinutes, maxDailyLoad, onlyWithRooms]
  );

  const canSubmit = days.length > 0 && !busy;

  const handleRun = async () => {
    if (days.length === 0) {
      toast({ variant: "destructive", title: "No days selected", description: "Please select at least one active day." });
      return;
    }

    setSubmitting(true);
    try {
      const res = await apiService.autoGenerateSchedules(payload);
      if (!res.success) throw new Error(res.message || res.error || "Auto-generation failed");

      const inserted = res.data?.inserted ?? 0;
      const skipped = res.data?.skipped ?? 0;
      toast({ title: "Automation complete", description: `Inserted ${inserted} • Skipped ${skipped}` });

      // optional post-success hook (e.g., refresh lists)
      await onRun?.(payload);

      onOpenChange(false);
    } catch (err: any) {
      toast({ variant: "destructive", title: "Error running automation", description: err?.message || "Please try again." });
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={(v) => !busy && onOpenChange(v)}>
      <DialogContent className="max-w-lg">
        <DialogHeader>
          <DialogTitle>Auto-Generate Schedules</DialogTitle>
        </DialogHeader>

        <div className="space-y-4">
          <div className="grid grid-cols-2 gap-3">
            <div>
              <label className="text-sm text-muted-foreground">School Year</label>
              <Input value={defaults.school_year} disabled />
            </div>
            <div>
              <label className="text-sm text-muted-foreground">Semester</label>
              <Input value={defaults.semester} disabled />
            </div>
          </div>

          <div className="grid grid-cols-2 gap-3">
            <div>
              <label className="text-sm text-muted-foreground">Class Day Start</label>
              <Input type="time" value={startTime} disabled />
            </div>
            <div>
              <label className="text-sm text-muted-foreground">Class Day End</label>
              <Input type="time" value={endTime} disabled />
            </div>
          </div>

          <div className="grid grid-cols-2 gap-3">
            <div>
              <label className="text-sm text-muted-foreground">Slot Minutes</label>
              <Select value={String(slotMinutes)} onValueChange={(v) => setSlotMinutes(parseInt(v))} disabled={busy}>
                <SelectTrigger>
                  <SelectValue placeholder="Select minutes" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="30">30</SelectItem>
                  <SelectItem value="45">45</SelectItem>
                  <SelectItem value="60">60</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <label className="text-sm text-muted-foreground">Max Classes/Day (per section)</label>
              <Input
                type="number"
                min={1}
                value={maxDailyLoad ?? ""}
                onChange={(e) => setMaxDailyLoad(e.target.value ? parseInt(e.target.value) : undefined)}
                placeholder="e.g., 6"
                disabled={busy}
              />
            </div>
          </div>

          <div>
            <label className="text-sm text-muted-foreground block mb-1">Active Days</label>
            <div className="flex flex-wrap gap-2">
              {dayOpts.map((d) => {
                const active = days.includes(d);
                return (
                  <Button key={d} type="button" variant={active ? "default" : "outline"} onClick={() => toggleDay(d)} size="sm" disabled={busy}>
                    {d.slice(0, 3)}
                  </Button>
                );
              })}
            </div>
          </div>

          <div className="flex items-center gap-2 rounded-md border p-3">
            <Checkbox id="onlyWithRooms" checked={onlyWithRooms} onCheckedChange={(v) => setOnlyWithRooms(Boolean(v))} disabled={busy} />
            <label htmlFor="onlyWithRooms" className="text-sm leading-none">
              Only include <span className="font-medium">sections with assigned rooms</span>
            </label>
          </div>

          <div className="rounded-md bg-muted px-3 py-2 text-xs text-muted-foreground">
            Rules: classes only between 7:30 AM–4:30 PM, no same-time classes in the same section, no professor double-booking,
            no duplicate subject per section, each subject ≤ 4 hrs/week, and (when enabled) only sections that already have rooms.
          </div>
        </div>

        <DialogFooter className="pt-2">
          <Button variant="outline" onClick={() => onOpenChange(false)} disabled={busy}>
            Cancel
          </Button>
          <Button onClick={handleRun} disabled={!canSubmit}>
            {busy ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                {submitting ? "Running..." : "Please wait..."}
              </>
            ) : (
              "Run Automation"
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default AutoGenerateDialog;
