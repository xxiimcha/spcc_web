import React, { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Input } from "@/components/ui/input";

type Props = {
  open: boolean;
  onOpenChange: (v: boolean) => void;
  onRun: (payload: {
    school_year: string;
    semester: string;
    strategy: "greedy" | "balanced";
    days: string[];         
    startTime: string;     
    endTime: string;     
    slotMinutes: number;    
    maxDailyLoad?: number;  
  }) => Promise<void> | void;
  defaults: {
    school_year: string;
    semester: string;
  };
};

const dayOpts = ["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];

const AutoGenerateDialog: React.FC<Props> = ({ open, onOpenChange, onRun, defaults }) => {
  const [strategy, setStrategy] = useState<"greedy"|"balanced">("greedy");
  const [days, setDays] = useState<string[]>(["Monday","Tuesday","Wednesday","Thursday","Friday"]);
  const [startTime, setStartTime] = useState("07:30");
  const [endTime, setEndTime] = useState("18:00");
  const [slotMinutes, setSlotMinutes] = useState(60);
  const [maxDailyLoad, setMaxDailyLoad] = useState<number | undefined>(6);

  const toggleDay = (d: string) => {
    setDays((prev) => prev.includes(d) ? prev.filter(x => x!==d) : [...prev, d]);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-lg">
        <DialogHeader>
          <DialogTitle>Auto-Generate Schedules</DialogTitle>
        </DialogHeader>

        <div className="space-y-4">
          <div className="grid grid-cols-2 gap-3">
            <div>
              <label className="text-sm text-muted-foreground">School Year</label>
              <Input value={defaults.school_year} disabled />
            </div>
            <div>
              <label className="text-sm text-muted-foreground">Semester</label>
              <Input value={defaults.semester} disabled />
            </div>
          </div>

          <div className="grid grid-cols-2 gap-3">
            <div>
              <label className="text-sm text-muted-foreground">Strategy</label>
              <Select value={strategy} onValueChange={(v:any)=>setStrategy(v)}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="greedy">Greedy (fast)</SelectItem>
                  <SelectItem value="balanced">Balanced (spread load)</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <label className="text-sm text-muted-foreground">Slot Minutes</label>
              <Input type="number" min={15} step={15} value={slotMinutes} onChange={(e)=>setSlotMinutes(parseInt(e.target.value||"0"))}/>
            </div>
          </div>

          <div className="grid grid-cols-2 gap-3">
            <div>
              <label className="text-sm text-muted-foreground">Day Start</label>
              <Input type="time" value={startTime} onChange={(e)=>setStartTime(e.target.value)}/>
            </div>
            <div>
              <label className="text-sm text-muted-foreground">Day End</label>
              <Input type="time" value={endTime} onChange={(e)=>setEndTime(e.target.value)}/>
            </div>
          </div>

          <div>
            <label className="text-sm text-muted-foreground block mb-1">Active Days</label>
            <div className="flex flex-wrap gap-2">
              {dayOpts.map(d => {
                const active = days.includes(d);
                return (
                  <Button
                    key={d}
                    type="button"
                    variant={active ? "default" : "outline"}
                    onClick={() => toggleDay(d)}
                    size="sm"
                  >
                    {d.slice(0,3)}
                  </Button>
                );
              })}
            </div>
          </div>

          <div>
            <label className="text-sm text-muted-foreground">Max classes/day per section (optional)</label>
            <Input
              type="number"
              min={1}
              value={maxDailyLoad ?? ""}
              onChange={(e)=> setMaxDailyLoad(e.target.value ? parseInt(e.target.value) : undefined)}
              placeholder="e.g., 6"
            />
          </div>
        </div>

        <DialogFooter className="pt-2">
          <Button variant="outline" onClick={() => onOpenChange(false)}>Cancel</Button>
          <Button
            onClick={() => onRun({
              school_year: defaults.school_year,
              semester: defaults.semester,
              strategy,
              days,
              startTime,
              endTime,
              slotMinutes,
              maxDailyLoad
            })}
          >
            Run Automation
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default AutoGenerateDialog;
